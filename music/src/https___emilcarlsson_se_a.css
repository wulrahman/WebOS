/* Flat UI Colors */
$turquoise: #1abc9c;
$green-sea: #16a085;
$emerald: #2ecc71;
$nephritis: #27ae60;
$peter-river: #3498db;
$belize-hole: #2980b9;
$amethyst: #9b59b6;
$wisteria: #8e44ad;
$wet-asphalt: #34495e;
$midnight-blue: #2c3e50;
$sun-flower: #f1c40f;
$orange: #f39c12;
$carrot: #e67e22;
$pumpkin: #d35400;
$alizarin: #e74c3c;
$pomegranate: #c0392b;
$clouds: #ecf0f1;
$silver: #bdc3c7;
$concrete: #95a5a6;
$asbestos: #7f8c8d;

.alizarin { background: $alizarin !important; }
.sun-flower { background: $sun-flower !important; }
.emerald { background: $emerald !important; }

/* Font with fallback */
$font: 'proxima-nova', 'Lato', 'Source Sans Pro', 'Raleway', Arial, sans-serif;

/*--------*/
/* Mixins */
/*--------*/

/* Transition */
@mixin transition($args...) {
  -webkit-transition: $args;
  -moz-transition: $args;
  -ms-transition: $args;
  -o-transition: $args;
  transition: $args;
}

/* Border Radius */
@mixin rounded($radius...) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  border-radius: $radius;
  
  -webkit-background-clip: padding-box;
  -moz-background-clip: padding;
  background-clip: padding-box;
}

/* Box-shadow */
@mixin box-shadow($value){
  -webkit-box-shadow: $value;
  -moz-box-shadow: $value;
  box-shadow: $value;
}

/* User Select */
@mixin user-select($value){
	-webkit-user-select: $value;       
	-moz-user-select: $value;
	-ms-user-select: $value;
}

/* Filter */
@mixin filter($filter-type,$filter-amount) { 
  -webkit-filter: $filter-type+unquote('(#{$filter-amount})');
  -moz-filter: $filter-type+unquote('(#{$filter-amount})');
  -ms-filter: $filter-type+unquote('(#{$filter-amount})');
  -o-filter: $filter-type+unquote('(#{$filter-amount})');
  filter: $filter-type+unquote('(#{$filter-amount})');
}

/* Appearance */
@mixin appearance($value){
  -moz-appearance: $value;
  -webkit-appearance: $value;
  appearance: $value;
}

/* Aspect Ratio */
@mixin aspect-ratio($width, $height) {
  position: relative;
  &:before {
    display: block;
    content: "";
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }
  > .content {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
}

/* Transform Base */
@mixin transform($transforms) {
	   -moz-transform: $transforms;
	     -o-transform: $transforms;
	    -ms-transform: $transforms;
	-webkit-transform: $transforms;
            transform: $transforms;
}

/* Transform - Scale */
@mixin scale($scale) {
	 @include transform(scale($scale));
}

/* Transform - Translate */
@mixin translate($x, $y) {
   @include transform(translate($x, $y));
}

/* Transform - Skew */
@mixin skew($x, $y) {
   @include transform(skew(#{$x}deg, #{$y}deg));
}

/* Transform - Origin */
@mixin transform-origin($origin) {
		moz-transform-origin: $origin;
		 -o-transform-origin: $origin;
		-ms-transform-origin: $origin;
	-webkit-transform-origin: $origin;
			transform-origin: $origin;
}

/* Linear Gradient */
@mixin linear-gradient($direction, $color-stops...) {
  @if is-direction($direction) == false {
    $color-stops: ($direction, $color-stops);
    $direction: 180deg;
  }
  
  background: nth(nth($color-stops, 1), 1);
  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
  background: linear-gradient($direction, $color-stops);
}
@function convert-angle($value, $unit) {
  $convertable-units: deg grad turn rad;
  $conversion-factors: 1 (10grad/9deg) (1turn/360deg) (3.1415926rad/180deg);
  @if index($convertable-units, unit($value)) and index($convertable-units, $unit) {
    @return $value
             / nth($conversion-factors, index($convertable-units, unit($value)))
             * nth($conversion-factors, index($convertable-units, $unit));
  }
  
  @warn "Cannot convert `#{unit($value)}` to `#{$unit}`.";
}
@function is-direction($value) {
  $is-direction: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
  $is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));
  
  @return $is-direction or $is-angle;
}
@function legacy-direction($value) {
  @if is-direction($value) == false {
    @warn "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be an angle or a direction";
  }
  
  $conversion-map: ( 
    to top          : bottom,
    to top right    : bottom left,
    to right top    : left bottom,
    to right        : left,
    to bottom right : top left,
    to right bottom : left top,
    to bottom       : top,
    to bottom left  : top right,
    to left bottom  : right top,
    to left         : right,
    to left top     : right bottom,
    to top left     : bottom right
  );
    
  @if map-has-key($conversion-map, $value) {
    @return map-get($conversion-map, $value);
  }
  
  @return 90deg - convert-angle($value, 'deg');
}

/* Calculate REM */
@function calculateRem($size) {
  @return #{$size / 16px}rem;
}
@function rem($size) {
  @return calculateRem($size);
}

/*---------*/
/* Presets */
/*---------*/

/* body */
body {
	background: $clouds;
	font-family: $font;
	height: 100vh;
	width: 100vw;
}

/* Float: left/right */
.pull-left { float: left; }
.pull-right { float: right; }

/* Flex center */
.flex-center {
	display: -webkit-box;
	display: -ms-flexbox;
	display: -webkit-flex;
	display: flex;
	-webkit-flex-align: center;
	-ms-flex-align: center;
	-webkit-align-items: center;
	align-items: center;
	justify-content: center;
}

/* Flex */
.flex {
	display: -webkit-box;
	display: -ms-flexbox;
	display: -webkit-flex;
	display: flex;
}

/* Outline none */
*, *:focus, *:active { outline: none }

.clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}